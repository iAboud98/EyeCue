import PDFDocument from 'pdfkit';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export class PDFService {
  constructor() {
    this.reportsDir = path.join(__dirname, '../../reports');
    this.ensureReportsDirectory();
  }

  ensureReportsDirectory() {
    if (!fs.existsSync(this.reportsDir)) {
      fs.mkdirSync(this.reportsDir, { recursive: true });
      console.log('Reports directory created:', this.reportsDir);
    }
  }

  async generateSessionReportPDF(reportData) {
    return new Promise((resolve, reject) => {
      try {
        const doc = new PDFDocument({ margin: 50 });
        const filename = `${reportData.sessionId}.pdf`;
        const filepath = path.join(this.reportsDir, filename);
        
        const stream = fs.createWriteStream(filepath);
        doc.pipe(stream);

        doc.fontSize(20)
           .fillColor('#2c3e50')
           .text('EyeCue Analytics - Session Report', { align: 'center' });

        doc.moveDown(1);

        doc.fontSize(14)
           .fillColor('#34495e')
           .text(`Session ID: ${reportData.sessionId}`, 50, doc.y)
           .text(`Generated At: ${new Date(reportData.generatedAt).toLocaleString()}`, 50, doc.y + 5)
           .text(`Total Students: ${reportData.students.length}`, 50, doc.y + 5);

        doc.moveDown(2);
        const tableTop = doc.y;
        const itemCodeX = 50;
        const nameX = 150;
        const totalFramesX = 280;
        const attentiveFramesX = 380;
        const percentageX = 480;

        doc.fontSize(12)
           .fillColor('#2c3e50')
           .text('No.', itemCodeX, tableTop, { width: 90 })
           .text('Student Name', nameX, tableTop, { width: 120 })
           .text('Total Frames', totalFramesX, tableTop, { width: 90 })
           .text('Attentive Frames', attentiveFramesX, tableTop, { width: 90 })
           .text('Attention %', percentageX, tableTop, { width: 90 });

        doc.moveTo(50, tableTop + 20)
           .lineTo(570, tableTop + 20)
           .stroke('#bdc3c7');

        let currentY = tableTop + 30;

        reportData.students.forEach((student, index) => {
          const attentionPercentage = Number(student.attention_percentage).toFixed(2);
          
          let textColor = '#27ae60'; 
          if (attentionPercentage < 70) {
            textColor = attentionPercentage >= 50 ? '#f39c12' : '#e74c3c'; // Orange for medium, red for low
          }

          doc.fontSize(10)
             .fillColor('#2c3e50')
             .text(index + 1, itemCodeX, currentY, { width: 90 })
             .text(student.name, nameX, currentY, { width: 120 })
             .text(student.total_frames.toString(), totalFramesX, currentY, { width: 90 })
             .text(student.attentive_frames.toString(), attentiveFramesX, currentY, { width: 90 })
             .fillColor(textColor)
             .text(`${attentionPercentage}%`, percentageX, currentY, { width: 90 });

          currentY += 25;

          if (currentY > 700) {
            doc.addPage();
            currentY = 50;
          }
        });

        doc.moveDown(2);
        const totalStudents = reportData.students.length;
        const highAttentionStudents = reportData.students.filter(s => s.attention_percentage >= 70).length;
        const mediumAttentionStudents = reportData.students.filter(s => s.attention_percentage >= 50 && s.attention_percentage < 70).length;
        const lowAttentionStudents = reportData.students.filter(s => s.attention_percentage < 50).length;

        const averageAttention = totalStudents > 0 
          ? (reportData.students.reduce((sum, s) => sum + Number(s.attention_percentage), 0) / totalStudents).toFixed(2)
          : 0;

        doc.fontSize(14)
           .fillColor('#2c3e50')
           .text('Session Summary', 50, currentY + 20);

        doc.fontSize(11)
           .fillColor('#34495e')
           .text(`Average Attention Level: ${averageAttention}%`, 50, currentY + 45)
           .text(`High Attention (â‰¥70%): ${highAttentionStudents} students`, 50, currentY + 65)
           .text(`Medium Attention (50-69%): ${mediumAttentionStudents} students`, 50, currentY + 80)
           .text(`Low Attention (<50%): ${lowAttentionStudents} students`, 50, currentY + 95);

        // Add footer
        doc.fontSize(8)
           .fillColor('#95a5a6')
           .text('Generated by EyeCue Analytics System', 50, 750, { align: 'center' });

        // Finalize the PDF
        doc.end();

        stream.on('finish', () => {
          console.log('PDF generated successfully:', filepath);
          resolve({ filepath, filename });
        });

        stream.on('error', (error) => {
          console.error('PDF generation error:', error);
          reject(error);
        });

      } catch (error) {
        console.error('PDF creation error:', error);
        reject(error);
      }
    });
  }

  getReportPath(sessionId) {
    return path.join(this.reportsDir, `${sessionId}.pdf`);
  }

  reportExists(sessionId) {
    const filepath = this.getReportPath(sessionId);
    return fs.existsSync(filepath);
  }
}